# API和状态管理规范

## API接口规范

### 1. API文件结构
```javascript
// src/api/user.js
import request from '@/utils/request'

// 用户相关API
export const userApi = {
  // 用户登录
  login: (data) => request.post('/api/user/login', data),
  
  // 用户注册
  register: (data) => request.post('/api/user/register', data),
  
  // 获取用户信息
  getUserInfo: () => request.get('/api/user/info'),
  
  // 更新用户信息
  updateUserInfo: (data) => request.put('/api/user/info', data),
  
  // 修改密码
  changePassword: (data) => request.put('/api/user/password', data),
  
  // 用户登出
  logout: () => request.post('/api/user/logout')
}
```

### 2. 请求工具规范
```javascript
// src/utils/request.js
import axios from 'axios'
import { message } from 'ant-design-vue'

// 创建axios实例
const request = axios.create({
  baseURL: import.meta.env.VITE_API_BASE_URL || '/api',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json'
  }
})

// 请求拦截器
request.interceptors.request.use(
  (config) => {
    // 添加token
    const token = localStorage.getItem('token')
    if (token) {
      config.headers.Authorization = `Bearer ${token}`
    }
    
    console.log('API请求:', config.method?.toUpperCase(), config.url)
    return config
  },
  (error) => {
    console.error('请求错误:', error)
    return Promise.reject(error)
  }
)

// 响应拦截器
request.interceptors.response.use(
  (response) => {
    console.log('API响应:', response.config.url, response.data)
    
    // 统一处理响应
    const { data } = response
    if (data.code === 200) {
      return data
    } else {
      // 业务错误
      message.error(data.message || '请求失败')
      return Promise.reject(new Error(data.message || '请求失败'))
    }
  },
  (error) => {
    console.error('响应错误:', error)
    
    // 统一错误处理
    if (error.response) {
      const { status, data } = error.response
      
      switch (status) {
        case 401:
          message.error('登录已过期，请重新登录')
          localStorage.removeItem('token')
          localStorage.removeItem('userInfo')
          window.location.href = '/login'
          break
        case 403:
          message.error('没有权限访问')
          break
        case 404:
          message.error('请求的资源不存在')
          break
        case 500:
          message.error('服务器内部错误')
          break
        default:
          message.error(data?.message || '请求失败')
      }
    } else if (error.code === 'ECONNABORTED') {
      message.error('请求超时，请稍后重试')
    } else {
      message.error('网络错误，请检查网络连接')
    }
    
    return Promise.reject(error)
  }
)

export default request
```

## Pinia状态管理规范

### 1. Store文件结构
```javascript
// src/store/user.js
import { defineStore } from 'pinia'
import { userApi } from '@/api/user'

export const useUserStore = defineStore('user', {
  state: () => ({
    // 用户信息
    userInfo: null,
    // 登录状态
    isLoggedIn: false,
    // 加载状态
    loading: false,
    // 错误信息
    error: null
  }),
  
  getters: {
    // 获取用户名
    username: (state) => state.userInfo?.username || '',
    
    // 获取用户角色
    userRole: (state) => state.userInfo?.role || '',
    
    // 是否为管理员
    isAdmin: (state) => state.userInfo?.role === 'admin',
    
    // 获取用户头像
    avatar: (state) => state.userInfo?.avatar || '',
    
    // 获取用户ID
    userId: (state) => state.userInfo?.id || null
  },
  
  actions: {
    // 用户登录
    async loginAction(loginData) {
      try {
        this.loading = true
        this.error = null
        
        console.log('UserStore - 开始登录:', loginData.username)
        
        const result = await userApi.login(loginData)
        
        if (result.code === 200) {
          // 保存token
          localStorage.setItem('token', result.data.token)
          
          // 获取用户信息
          await this.getUserInfoAction()
          
          this.isLoggedIn = true
          console.log('UserStore - 登录成功')
          
          return result
        } else {
          throw new Error(result.message || '登录失败')
        }
      } catch (error) {
        console.error('UserStore - 登录失败:', error)
        this.error = error.message
        throw error
      } finally {
        this.loading = false
      }
    },
    
    // 获取用户信息
    async getUserInfoAction() {
      try {
        const result = await userApi.getUserInfo()
        
        if (result.code === 200) {
          this.userInfo = result.data
          localStorage.setItem('userInfo', JSON.stringify(result.data))
          console.log('UserStore - 获取用户信息成功:', result.data.username)
        }
        
        return result
      } catch (error) {
        console.error('UserStore - 获取用户信息失败:', error)
        throw error
      }
    },
    
    // 用户登出
    async logoutAction() {
      try {
        await userApi.logout()
      } catch (error) {
        console.error('UserStore - 登出API调用失败:', error)
      } finally {
        // 清除本地数据
        this.clearUserData()
      }
    },
    
    // 清除用户数据
    clearUserData() {
      this.userInfo = null
      this.isLoggedIn = false
      this.error = null
      
      localStorage.removeItem('token')
      localStorage.removeItem('userInfo')
      
      console.log('UserStore - 用户数据已清除')
    },
    
    // 初始化用户状态
    async initUserState() {
      const token = localStorage.getItem('token')
      const userInfo = localStorage.getItem('userInfo')
      
      if (token && userInfo) {
        try {
          this.userInfo = JSON.parse(userInfo)
          this.isLoggedIn = true
          
          // 验证token有效性
          await this.getUserInfoAction()
          
          console.log('UserStore - 用户状态初始化成功')
        } catch (error) {
          console.error('UserStore - 用户状态初始化失败:', error)
          this.clearUserData()
        }
      }
    }
  }
})
```

### 2. 项目Store规范
```javascript
// src/store/project.js
import { defineStore } from 'pinia'
import { projectApi } from '@/api/project'

export const useProjectStore = defineStore('project', {
  state: () => ({
    // 项目列表
    projectList: [],
    // 当前项目
    currentProject: null,
    // 加载状态
    loading: false,
    // 分页信息
    pagination: {
      current: 1,
      pageSize: 10,
      total: 0
    },
    // 错误信息
    error: null
  }),
  
  getters: {
    // 获取项目总数
    projectCount: (state) => state.projectList.length,
    
    // 获取进行中的项目
    activeProjects: (state) => state.projectList.filter(p => p.status === 'active'),
    
    // 获取已完成的项目
    completedProjects: (state) => state.projectList.filter(p => p.status === 'completed')
  },
  
  actions: {
    // 获取项目列表
    async getProjectList(params = {}) {
      try {
        this.loading = true
        this.error = null
        
        const result = await projectApi.getProjectList(params)
        
        if (result.code === 200) {
          this.projectList = result.data.list
          this.pagination = {
            current: result.data.pagination.current,
            pageSize: result.data.pagination.pageSize,
            total: result.data.pagination.total
          }
        }
        
        return result
      } catch (error) {
        console.error('ProjectStore - 获取项目列表失败:', error)
        this.error = error.message
        throw error
      } finally {
        this.loading = false
      }
    },
    
    // 创建项目
    async createProject(projectData) {
      try {
        this.loading = true
        this.error = null
        
        const result = await projectApi.createProject(projectData)
        
        if (result.code === 200) {
          // 刷新项目列表
          await this.getProjectList()
        }
        
        return result
      } catch (error) {
        console.error('ProjectStore - 创建项目失败:', error)
        this.error = error.message
        throw error
      } finally {
        this.loading = false
      }
    },
    
    // 更新项目
    async updateProject(projectId, projectData) {
      try {
        this.loading = true
        this.error = null
        
        const result = await projectApi.updateProject(projectId, projectData)
        
        if (result.code === 200) {
          // 更新本地数据
          const index = this.projectList.findIndex(p => p.id === projectId)
          if (index !== -1) {
            this.projectList[index] = { ...this.projectList[index], ...projectData }
          }
        }
        
        return result
      } catch (error) {
        console.error('ProjectStore - 更新项目失败:', error)
        this.error = error.message
        throw error
      } finally {
        this.loading = false
      }
    },
    
    // 删除项目
    async deleteProject(projectId) {
      try {
        this.loading = true
        this.error = null
        
        const result = await projectApi.deleteProject(projectId)
        
        if (result.code === 200) {
          // 从列表中移除
          this.projectList = this.projectList.filter(p => p.id !== projectId)
        }
        
        return result
      } catch (error) {
        console.error('ProjectStore - 删除项目失败:', error)
        this.error = error.message
        throw error
      } finally {
        this.loading = false
      }
    },
    
    // 设置当前项目
    setCurrentProject(project) {
      this.currentProject = project
    },
    
    // 清除当前项目
    clearCurrentProject() {
      this.currentProject = null
    }
  }
})
```

### 3. 在组件中使用Store
```javascript
// 在Vue组件中使用
import { useUserStore } from '@/store/user'
import { useProjectStore } from '@/store/project'

// 在setup中使用
const userStore = useUserStore()
const projectStore = useProjectStore()

// 使用状态
const { userInfo, isLoggedIn, loading } = storeToRefs(userStore)
const { projectList, currentProject } = storeToRefs(projectStore)

// 使用getters
const { username, isAdmin } = storeToRefs(userStore)
const { projectCount, activeProjects } = storeToRefs(projectStore)

// 调用actions
const handleLogin = async (loginData) => {
  try {
    await userStore.loginAction(loginData)
    message.success('登录成功')
  } catch (error) {
    message.error(error.message)
  }
}

const handleCreateProject = async (projectData) => {
  try {
    await projectStore.createProject(projectData)
    message.success('项目创建成功')
  } catch (error) {
    message.error(error.message)
  }
}
```
description:
globs:
alwaysApply: false
---
